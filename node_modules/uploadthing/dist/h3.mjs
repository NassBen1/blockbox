import {
  UPLOADTHING_VERSION,
  buildPermissionsInfoHandler,
  buildRequestHandler,
  createBuilder,
  defaultErrorFormatter,
  incompatibleNodeGuard,
  initLogger
} from "./chunk-F7EZ2442.mjs";
import "./chunk-4QCB7YXI.mjs";
import "./chunk-JW5CQVQS.mjs";

// src/h3.ts
import {
  assertMethod,
  defineEventHandler,
  setHeader,
  setResponseStatus,
  toWebRequest
} from "h3";
import { getStatusCodeFromError, UploadThingError } from "@uploadthing/shared";
var createUploadthing = (opts) => createBuilder(opts);
var createRouteHandler = (opts) => {
  var _a;
  initLogger((_a = opts.config) == null ? void 0 : _a.logLevel);
  incompatibleNodeGuard();
  const requestHandler = buildRequestHandler(opts, "h3");
  const getBuildPerms = buildPermissionsInfoHandler(opts);
  return defineEventHandler(async (event) => {
    var _a2;
    assertMethod(event, ["GET", "POST"]);
    setHeader(event, "x-uploadthing-version", UPLOADTHING_VERSION);
    if (event.method === "GET") {
      return getBuildPerms();
    }
    const response = await requestHandler({
      nativeRequest: toWebRequest(event),
      event
    });
    if (response instanceof UploadThingError) {
      setResponseStatus(event, getStatusCodeFromError(response));
      const errorFormatter = ((_a2 = opts.router[Object.keys(opts.router)[0]]) == null ? void 0 : _a2._def.errorFormatter) ?? defaultErrorFormatter;
      return errorFormatter(response);
    }
    if (response.status !== 200) {
      setResponseStatus(event, 500);
      return "An unknown error occurred";
    }
    return response.body;
  });
};
var createH3EventHandler = createRouteHandler;
export {
  createH3EventHandler,
  createRouteHandler,
  createUploadthing
};
//# sourceMappingURL=h3.mjs.map