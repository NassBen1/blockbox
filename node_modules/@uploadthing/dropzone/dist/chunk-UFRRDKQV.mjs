// src/core.ts
import attrAccepts from "attr-accept";
var accepts = (
  // @ts-expect-error - ESM interop
  typeof attrAccepts === "function" ? attrAccepts : attrAccepts.default
);
function isFileAccepted(file, accept) {
  return file.type === "application/x-moz-file" || accepts(file, accept);
}
function isEnterOrSpace(event) {
  return "key" in event && (event.key === " " || event.key === "Enter") || "keyCode" in event && (event.keyCode === 32 || event.keyCode === 13);
}
var isDefined = (v) => v != null;
function isValidSize(file, minSize, maxSize) {
  if (!isDefined(file.size))
    return true;
  if (isDefined(minSize) && isDefined(maxSize)) {
    return file.size >= minSize && file.size <= maxSize;
  }
  if (isDefined(minSize) && file.size < minSize)
    return false;
  if (isDefined(maxSize) && file.size > maxSize)
    return false;
  return true;
}
function isValidQuantity(files, multiple, maxFiles) {
  if (!multiple && files.length > 1)
    return false;
  if (multiple && maxFiles >= 1 && files.length > maxFiles)
    return false;
  return true;
}
function allFilesAccepted({
  files,
  accept,
  minSize,
  maxSize,
  multiple,
  maxFiles
}) {
  if (!isValidQuantity(files, multiple, maxFiles))
    return false;
  return files.every(
    (file) => isFileAccepted(file, accept) && isValidSize(file, minSize, maxSize)
  );
}
function isEventWithFiles(event) {
  var _a;
  if (!("dataTransfer" in event && event.dataTransfer !== null)) {
    return !!event.target && "files" in event.target && !!event.target.files;
  }
  return Array.prototype.some.call(
    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
    (_a = event.dataTransfer) == null ? void 0 : _a.types,
    (type) => type === "Files" || type === "application/x-moz-file"
  );
}
function isIeOrEdge(ua = window.navigator.userAgent) {
  return ua.indexOf("MSIE ") > -1 || ua.indexOf("Trident/") > -1 || ua.indexOf("Edge/") > -1;
}
function isMIMEType(v) {
  return v === "audio/*" || v === "video/*" || v === "image/*" || v === "text/*" || /\w+\/[-+.\w]+/g.test(v);
}
function isExt(v) {
  return /^.*\.[\w]+$/.test(v);
}
function acceptPropAsAcceptAttr(accept) {
  if (isDefined(accept)) {
    return Object.entries(accept).reduce((a, [mimeType, ext]) => [...a, mimeType, ...ext], []).filter((v) => isMIMEType(v) || isExt(v)).join(",");
  }
  return void 0;
}
function noop() {
}
var initialState = {
  isFocused: false,
  isFileDialogActive: false,
  isDragActive: false,
  isDragAccept: false,
  isDragReject: false,
  acceptedFiles: []
};
function reducer(state, action) {
  switch (action.type) {
    case "focus":
      return {
        ...state,
        isFocused: true
      };
    case "blur":
      return {
        ...state,
        isFocused: false
      };
    case "openDialog":
      return {
        ...initialState,
        isFileDialogActive: true
      };
    case "closeDialog":
      return {
        ...state,
        isFileDialogActive: false
      };
    case "setDraggedFiles":
      return {
        ...state,
        ...action.payload
      };
    case "setFiles":
      return {
        ...state,
        ...action.payload
      };
    case "reset":
      return initialState;
    default:
      return state;
  }
}

export {
  isFileAccepted,
  isEnterOrSpace,
  isValidSize,
  isValidQuantity,
  allFilesAccepted,
  isEventWithFiles,
  isIeOrEdge,
  acceptPropAsAcceptAttr,
  noop,
  initialState,
  reducer
};
//# sourceMappingURL=chunk-UFRRDKQV.mjs.map