"use client";

// src/useUploadThing.ts
import { useRef as useRef2, useState } from "react";
import { UploadThingError } from "@uploadthing/shared";
import {
  DANGEROUS__uploadFiles,
  INTERNAL_DO_NOT_USE__fatalClientError,
  resolveMaybeUrlArg
} from "uploadthing/client";

// src/utils/useEvent.ts
import React from "react";
var noop = () => void 0;
var useInsertionEffect = typeof window !== "undefined" ? (
  // useInsertionEffect is available in React 18+
  React.useInsertionEffect || React.useLayoutEffect
) : noop;
function useEvent(callback) {
  const latestRef = React.useRef(
    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
    useEvent_shouldNotBeInvokedBeforeMount
  );
  useInsertionEffect(() => {
    latestRef.current = callback;
  }, [callback]);
  const stableRef = React.useRef();
  if (!stableRef.current) {
    stableRef.current = function() {
      return latestRef.current.apply(this, arguments);
    };
  }
  return stableRef.current;
}
function useEvent_shouldNotBeInvokedBeforeMount() {
  throw new Error(
    "INVALID_USEEVENT_INVOCATION: the callback from useEvent cannot be invoked before the component has mounted."
  );
}

// src/utils/useFetch.ts
import { useEffect, useReducer, useRef } from "react";
import { safeParseJSON } from "@uploadthing/shared";
function useFetch(url, options) {
  const cache = useRef({});
  const cancelRequest = useRef(false);
  const initialState = {
    error: void 0,
    data: void 0
  };
  const fetchReducer = (state2, action) => {
    switch (action.type) {
      case "loading":
        return { ...initialState };
      case "fetched":
        return { ...initialState, data: action.payload };
      case "error":
        return { ...initialState, error: action.payload };
      default:
        return state2;
    }
  };
  const [state, dispatch] = useReducer(fetchReducer, initialState);
  useEffect(() => {
    if (!url)
      return;
    cancelRequest.current = false;
    const fetchData = async () => {
      dispatch({ type: "loading" });
      if (cache.current[url]) {
        dispatch({ type: "fetched", payload: cache.current[url] });
        return;
      }
      try {
        const response = await fetch(url, options);
        if (!response.ok) {
          throw new Error(response.statusText);
        }
        const dataOrError = await safeParseJSON(response);
        if (dataOrError instanceof Error) {
          throw dataOrError;
        }
        cache.current[url] = dataOrError;
        if (cancelRequest.current)
          return;
        dispatch({ type: "fetched", payload: dataOrError });
      } catch (error) {
        if (cancelRequest.current)
          return;
        dispatch({ type: "error", payload: error });
      }
    };
    void fetchData();
    return () => {
      cancelRequest.current = true;
    };
  }, [url]);
  return state;
}
var useFetch_default = useFetch;

// src/useUploadThing.ts
var useEndpointMetadata = (url, endpoint) => {
  var _a;
  const maybeServerData = globalThis.__UPLOADTHING;
  const { data } = useFetch_default(
    // Don't fetch if we already have the data
    maybeServerData ? void 0 : url.href
  );
  return (_a = maybeServerData ?? data) == null ? void 0 : _a.find((x) => x.slug === endpoint);
};
var INTERNAL_uploadthingHookGen = (initOpts) => {
  const useUploadThing = (endpoint, opts) => {
    const [isUploading, setUploading] = useState(false);
    const uploadProgress = useRef2(0);
    const fileProgress = useRef2(/* @__PURE__ */ new Map());
    const permittedFileInfo = useEndpointMetadata(
      initOpts.url,
      endpoint
    );
    const startUpload = useEvent(async (...args) => {
      var _a, _b, _c, _d;
      const files = await ((_a = opts == null ? void 0 : opts.onBeforeUploadBegin) == null ? void 0 : _a.call(opts, args[0])) ?? args[0];
      const input = args[1];
      setUploading(true);
      (_b = opts == null ? void 0 : opts.onUploadProgress) == null ? void 0 : _b.call(opts, 0);
      try {
        const res = await DANGEROUS__uploadFiles(endpoint, {
          files,
          input,
          onUploadProgress: (progress) => {
            var _a2;
            if (!(opts == null ? void 0 : opts.onUploadProgress))
              return;
            fileProgress.current.set(progress.file, progress.progress);
            let sum = 0;
            fileProgress.current.forEach((p) => {
              sum += p;
            });
            const averageProgress = Math.floor(sum / fileProgress.current.size / 10) * 10;
            if (averageProgress !== uploadProgress.current) {
              (_a2 = opts == null ? void 0 : opts.onUploadProgress) == null ? void 0 : _a2.call(opts, averageProgress);
              uploadProgress.current = averageProgress;
            }
          },
          onUploadBegin({ file }) {
            if (!(opts == null ? void 0 : opts.onUploadBegin))
              return;
            opts.onUploadBegin(file);
          },
          url: initOpts.url,
          package: "@uploadthing/react"
        });
        (_c = opts == null ? void 0 : opts.onClientUploadComplete) == null ? void 0 : _c.call(opts, res);
        return res;
      } catch (e) {
        let error;
        if (e instanceof UploadThingError) {
          error = e;
        } else {
          error = INTERNAL_DO_NOT_USE__fatalClientError(e);
          console.error(
            "Something went wrong. Please contact UploadThing and provide the following cause:",
            error.cause instanceof Error ? error.cause.toString() : error.cause
          );
        }
        (_d = opts == null ? void 0 : opts.onUploadError) == null ? void 0 : _d.call(opts, error);
      } finally {
        setUploading(false);
        fileProgress.current = /* @__PURE__ */ new Map();
        uploadProgress.current = 0;
      }
    });
    return {
      startUpload,
      isUploading,
      permittedFileInfo
    };
  };
  return useUploadThing;
};
var generateReactHelpers = (initOpts) => {
  const url = resolveMaybeUrlArg(initOpts == null ? void 0 : initOpts.url);
  return {
    useUploadThing: INTERNAL_uploadthingHookGen({ url }),
    uploadFiles: (endpoint, opts) => (
      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
      DANGEROUS__uploadFiles(endpoint, {
        ...opts,
        url,
        package: "@uploadthing/react"
      })
    )
  };
};

export {
  INTERNAL_uploadthingHookGen,
  generateReactHelpers
};
//# sourceMappingURL=chunk-J6PR442L.mjs.map