import { U as UploadthingComponentProps, G as GenerateTypedHelpersOptions } from './hooks-ddc1cfab.js';
export { a as UseUploadthingProps, g as generateReactHelpers } from './hooks-ddc1cfab.js';
import * as react_jsx_runtime from 'react/jsx-runtime';
import { StyleField, ContentField } from 'uploadthing/client';
import { FileRouter, ErrorMessage } from 'uploadthing/server';
import { JSXElementConstructor, ComponentProps } from 'react';
export * from '@uploadthing/dropzone/react';
export { useDropzone } from '@uploadthing/dropzone/react';
import '@uploadthing/shared';
import 'uploadthing/dist/types-b5a44cf1';

type DropzoneStyleFieldCallbackArgs = {
    __runtime: "react";
    ready: boolean;
    isUploading: boolean;
    uploadProgress: number;
    fileTypes: string[];
    isDragActive: boolean;
};
type UploadDropzoneProps<TRouter extends FileRouter, TEndpoint extends keyof TRouter> = UploadthingComponentProps<TRouter, TEndpoint> & {
    appearance?: {
        container?: StyleField<DropzoneStyleFieldCallbackArgs>;
        uploadIcon?: StyleField<DropzoneStyleFieldCallbackArgs>;
        label?: StyleField<DropzoneStyleFieldCallbackArgs>;
        allowedContent?: StyleField<DropzoneStyleFieldCallbackArgs>;
        button?: StyleField<DropzoneStyleFieldCallbackArgs>;
    };
    content?: {
        uploadIcon?: ContentField<DropzoneStyleFieldCallbackArgs>;
        label?: ContentField<DropzoneStyleFieldCallbackArgs>;
        allowedContent?: ContentField<DropzoneStyleFieldCallbackArgs>;
        button?: ContentField<DropzoneStyleFieldCallbackArgs>;
    };
    className?: string;
};
declare function UploadDropzone<TRouter extends FileRouter, TEndpoint extends keyof TRouter>(props: FileRouter extends TRouter ? ErrorMessage<"You forgot to pass the generic"> : UploadDropzoneProps<TRouter, TEndpoint>): react_jsx_runtime.JSX.Element;

type ButtonStyleFieldCallbackArgs = {
    __runtime: "react";
    ready: boolean;
    isUploading: boolean;
    uploadProgress: number;
    fileTypes: string[];
};
type UploadButtonProps<TRouter extends FileRouter, TEndpoint extends keyof TRouter> = UploadthingComponentProps<TRouter, TEndpoint> & {
    appearance?: {
        container?: StyleField<ButtonStyleFieldCallbackArgs>;
        button?: StyleField<ButtonStyleFieldCallbackArgs>;
        allowedContent?: StyleField<ButtonStyleFieldCallbackArgs>;
        clearBtn?: StyleField<ButtonStyleFieldCallbackArgs>;
    };
    content?: {
        button?: ContentField<ButtonStyleFieldCallbackArgs>;
        allowedContent?: ContentField<ButtonStyleFieldCallbackArgs>;
        clearBtn?: ContentField<ButtonStyleFieldCallbackArgs>;
    };
    className?: string;
};
/**
 * @example
 * <UploadButton<OurFileRouter>
 *   endpoint="someEndpoint"
 *   onUploadComplete={(res) => console.log(res)}
 *   onUploadError={(err) => console.log(err)}
 * />
 */
declare function UploadButton<TRouter extends FileRouter, TEndpoint extends keyof TRouter>(props: FileRouter extends TRouter ? ErrorMessage<"You forgot to pass the generic"> : UploadButtonProps<TRouter, TEndpoint>): react_jsx_runtime.JSX.Element;

declare function Uploader<TRouter extends FileRouter, TEndpoint extends keyof TRouter>(props: FileRouter extends TRouter ? ErrorMessage<"You forgot to pass the generic"> : UploadthingComponentProps<TRouter, TEndpoint>): react_jsx_runtime.JSX.Element;

type OmitInitOpts<T extends keyof JSX.IntrinsicElements | JSXElementConstructor<any>> = Omit<ComponentProps<T>, keyof GenerateTypedHelpersOptions>;
declare const generateUploadButton: <TRouter extends FileRouter>(opts?: GenerateTypedHelpersOptions) => <TEndpoint extends keyof TRouter>(props: OmitInitOpts<(props: FileRouter extends TRouter ? "You forgot to pass the generic" : UploadButtonProps<TRouter, TEndpoint>) => react_jsx_runtime.JSX.Element>) => react_jsx_runtime.JSX.Element;
declare const generateUploadDropzone: <TRouter extends FileRouter>(opts?: GenerateTypedHelpersOptions) => <TEndpoint extends keyof TRouter>(props: OmitInitOpts<(props: FileRouter extends TRouter ? "You forgot to pass the generic" : UploadDropzoneProps<TRouter, TEndpoint>) => react_jsx_runtime.JSX.Element>) => react_jsx_runtime.JSX.Element;
declare const generateUploader: <TRouter extends FileRouter>(opts?: GenerateTypedHelpersOptions) => <TEndpoint extends keyof TRouter>(props: OmitInitOpts<(props: FileRouter extends TRouter ? "You forgot to pass the generic" : UploadthingComponentProps<TRouter, TEndpoint>) => react_jsx_runtime.JSX.Element>) => react_jsx_runtime.JSX.Element;
/**
 * @deprecated - use {@link generateUploadButton}, {@link generateUploadDropzone}, and {@link generateUploader} instead
 */
declare function generateComponents<TRouter extends FileRouter>(initOpts?: GenerateTypedHelpersOptions): {
    UploadButton: <TEndpoint extends keyof TRouter>(props: OmitInitOpts<(props: FileRouter extends TRouter ? "You forgot to pass the generic" : UploadButtonProps<TRouter, TEndpoint>) => react_jsx_runtime.JSX.Element>) => react_jsx_runtime.JSX.Element;
    UploadDropzone: <TEndpoint_2 extends keyof TRouter>(props: OmitInitOpts<(props: FileRouter extends TRouter ? "You forgot to pass the generic" : UploadDropzoneProps<TRouter, TEndpoint_2>) => react_jsx_runtime.JSX.Element>) => react_jsx_runtime.JSX.Element;
    Uploader: <TEndpoint_4 extends keyof TRouter>(props: OmitInitOpts<(props: FileRouter extends TRouter ? "You forgot to pass the generic" : UploadthingComponentProps<TRouter, TEndpoint_4>) => react_jsx_runtime.JSX.Element>) => react_jsx_runtime.JSX.Element;
};

export { GenerateTypedHelpersOptions, UploadButton, UploadDropzone, Uploader, UploadthingComponentProps, generateComponents, generateUploadButton, generateUploadDropzone, generateUploader };
